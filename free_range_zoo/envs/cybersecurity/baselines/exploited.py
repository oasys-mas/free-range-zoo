"""Agent that picks the most exploited node and continues to patch / attack it, repositioning every three timesteps."""

from typing import List, Dict, Any
import torch

import free_range_rust
from free_range_zoo.utils.agent import Agent


class ExploitedAttackerBaseline(Agent):
    """Agent that picks the strongest available fire and focuses on it until its out."""

    def act(self, action_space: free_range_rust.Space) -> List[List[int]]:
        """
        Return a list of actions, one for each parallel environment.

        Args:
            action_space: free_range_rust.Space - Current action space available to the agent.
        Returns:
            List[List[int]] - List of actions, one for each parallel environment.
        """
        pass

    def observe(self, observation: Dict[str, Any]) -> None:
        """
        Observe the environment.

        Args:
            observation: Dict[str, Any] - Current observation from the environment.
        """
        pass


class ExploitedDefenderBaseline(Agent):
    """Agent that picks the strongest available fire and focuses on it until its out."""

    def __init__(self) -> None:
        self.focused_node = None
        self.time_focused = None

    def act(self, action_space: free_range_rust.Space) -> List[List[int]]:
        """
        Return a list of actions, one for each parallel environment.

        Args:
            action_space: free_range_rust.Space - Current action space available to the agent.
        Returns:
            List[List[int]] - List of actions, one for each parallel environment.
        """

        return self.actions

    def observe(self, observation: Dict[str, Any]) -> None:
        """
        Observe the environment.

        Args:
            observation: Dict[str, Any] - Current observation from the environment.
        """
        self.observation, self.t_mapping = observation
        self.actions = torch.zeros((self.observation.size(0), 2), dtype=torch.int32)

        # This is the first time we every observe anything
        if self.focused_node is None and self.time_focused is None:
            self.focused_node = torch.ones((self.observation.size(0), ), dtype=torch.int32) * -1
            self.time_focused = torch.zeros((self.observation.size(0), ), dtype=torch.int32)

        print(self.observation['tasks'])

        # print(observation['self'])
        # print(observation['others'])
        # print(observation['tasks'])

        self.actions = torch.zeros((observation.size(0), 2), dtype=torch.int32)
